#ifndef INCLUDE_SCREEN_HDR
#define INCLUDE_SCREEN_HDR

#include <vector>
#include <memory>
#include <array>
#include <random>
#include "cursor.hpp"
#include "menu.hpp"

enum Game_state {
    RUNNING,
    STOP,
    TERM,
};

// KeyCode of Direction Key in the keyboard
// this enum can be used to test which key was typed,
// and also can be used to represent direction
enum Direction {
    LEFT = 37,
    UP,
    RIGHT,
    DOWN,
};

class Screen
{
    friend class Base_block;

public:
    Screen();

    void generate_block();
    void move_block(Direction);
    void rotate_block();
    bool check_collision(Direction);
    // check if any line can be eliminated
    // if can't, do nothing
    void eliminate();
    void pause();
    bool is_stopped() { return state == STOP; }

private: 
    // these functions will only be called in constructor
    // so they should be declared to private
    void show_skeleton();
    void show_menu_list();
    void show();
    void erase();
    void flow_down(std::vector<unsigned> &);
    void repaint();
    unsigned get_random() { return u(e); }

    // size of screen
    const size_t width = 17;
    const size_t height = 24;

    // coordinate of current block
    unsigned curr_x, curr_y;
    // current block and next block
    Block curr_block, next_block;

    Game_state state = RUNNING;
    // store the content that indicates what the screen should display
    std::array<std::array<int, 17>, 24> contents;
    std::array<std::array<Color, 17>, 24> colors;

//     // menu list that will be shown in the right screen
//     const std::vector<std::shared_ptr<Menu>> menu_list{
//         std::make_shared<Score>(),
//         std::make_shared<Pred_next>(),
//         std::make_shared<Help_msg>(),
//     };

    // Menu
    Score menu_score;
    Pred_next menu_pred;
    Help_msg menu_help;

    // for generate random number in range [1, 5]
    // each number represent a kind of block
    static std::default_random_engine e;
    static std::uniform_int_distribution<unsigned> u;
};

// inline unsigned get_random() {
//     static std::default_random_engine e(time(0));
//     static std::uniform_int_distribution<unsigned> u(1, 5);
//     // In the  c++ standard library implemented in my system,
//     // the first number generated by engine will always be the same,
//     // so we discard it.
//     e.discard(1);
//     return u(e);
// }

#endif
